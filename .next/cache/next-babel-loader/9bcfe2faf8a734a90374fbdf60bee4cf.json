{"ast":null,"code":"import sqlite from 'sqlite';\nexport default (async (req, res) => {\n  res.statusCode = 200;\n  const db = await sqlite.open('./library.sqlite');\n  const books1st = await db.all('select * from books');\n  console.log(`bookList 1stttttttttt--->${JSON.stringify(books1st)}`);\n  console.log(`req.body--->${JSON.parse(req.body)}`);\n\n  if (req.body.length > 0) {\n    for (let index = 0; index < req.body.length; index++) {\n      const statement = await db.prepare('UPDATE books SET availableQty= ? where bookId= ? ');\n      const result = await statement.run(req.body[index].availableQty - 1, req.body[index].bookId);\n      console.log(`result---->${result}`);\n      result.finalize();\n    }\n  } //   const books = await db.all(`update books bookId = ${req.body.bookId}`);\n\n\n  const books2nd = await db.all('select * from books');\n  console.log(`req--->${req.body}`);\n  console.log(`bookList 2nddddddd--->${JSON.stringify(books2nd)}`);\n  res.json({\n    data: 'Borrowed succesfully'\n  });\n});","map":{"version":3,"sources":["/Users/Abhipray 1/Desktop/MY home/mYY work/HEXAD_assignment/Hexad_trial_code/hexd/pages/api/borrowBooks.js"],"names":["sqlite","req","res","statusCode","db","open","books1st","all","console","log","JSON","stringify","parse","body","length","index","statement","prepare","result","run","availableQty","bookId","finalize","books2nd","json","data"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjCA,EAAAA,GAAG,CAACC,UAAJ,GAAiB,GAAjB;AACA,QAAMC,EAAE,GAAG,MAAMJ,MAAM,CAACK,IAAP,CAAY,kBAAZ,CAAjB;AACA,QAAMC,QAAQ,GAAG,MAAMF,EAAE,CAACG,GAAH,CAAO,qBAAP,CAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,4BAA2BC,IAAI,CAACC,SAAL,CAAeL,QAAf,CAAyB,EAAjE;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAa,eAAcC,IAAI,CAACE,KAAL,CAAWX,GAAG,CAACY,IAAf,CAAqB,EAAhD;;AAEA,MAAIZ,GAAG,CAACY,IAAJ,CAASC,MAAT,GAAkB,CAAtB,EAAyB;AACvB,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGd,GAAG,CAACY,IAAJ,CAASC,MAArC,EAA6CC,KAAK,EAAlD,EAAsD;AAClD,YAAMC,SAAS,GAAG,MAAMZ,EAAE,CAACa,OAAH,CAAW,mDAAX,CAAxB;AACA,YAAMC,MAAM,GAAG,MAAMF,SAAS,CAACG,GAAV,CACjBlB,GAAG,CAACY,IAAJ,CAASE,KAAT,EAAgBK,YAAhB,GAA6B,CADZ,EAEjBnB,GAAG,CAACY,IAAJ,CAASE,KAAT,EAAgBM,MAFC,CAArB;AAIAb,MAAAA,OAAO,CAACC,GAAR,CAAa,cAAaS,MAAO,EAAjC;AACAA,MAAAA,MAAM,CAACI,QAAP;AACH;AACF,GAlBgC,CAmBnC;;;AACE,QAAMC,QAAQ,GAAG,MAAMnB,EAAE,CAACG,GAAH,CAAO,qBAAP,CAAvB;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAa,UAASR,GAAG,CAACY,IAAK,EAA/B;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAa,yBAAwBC,IAAI,CAACC,SAAL,CAAeY,QAAf,CAAyB,EAA9D;AACArB,EAAAA,GAAG,CAACsB,IAAJ,CAAS;AACPC,IAAAA,IAAI,EAAE;AADC,GAAT;AAGD,CA5BD","sourcesContent":["import sqlite from 'sqlite';\n\nexport default async (req, res) => {\n  res.statusCode = 200;\n  const db = await sqlite.open('./library.sqlite');\n  const books1st = await db.all('select * from books');\n  console.log(`bookList 1stttttttttt--->${JSON.stringify(books1st)}`);\n\n  console.log(`req.body--->${JSON.parse(req.body)}`);\n\n  if (req.body.length > 0) {\n    for (let index = 0; index < req.body.length; index++) {\n        const statement = await db.prepare('UPDATE books SET availableQty= ? where bookId= ? ');\n        const result = await statement.run(\n            req.body[index].availableQty-1,\n            req.body[index].bookId,\n        )\n        console.log(`result---->${result}`);\n        result.finalize();\n    }\n  }\n//   const books = await db.all(`update books bookId = ${req.body.bookId}`);\n  const books2nd = await db.all('select * from books');\n\n\n  console.log(`req--->${req.body}`);\n  console.log(`bookList 2nddddddd--->${JSON.stringify(books2nd)}`);\n  res.json({ \n    data: 'Borrowed succesfully'\n  });\n}\n"]},"metadata":{},"sourceType":"module"}