{"ast":null,"code":"import openDB from '../../../backend/configs/database/openDB';\nimport UserDetails from '../getUserDetails';\nexport default (async (req, res) => {\n  res.statusCode = 200;\n  const db = await openDB();\n  const reqBody = JSON.parse(req.body);\n  const userCurrentData = await UserDetails({\n    body: JSON.stringify({\n      userId: reqBody.userId\n    })\n  });\n  let bookIds = userCurrentData.bookIds || '';\n  const currentBooks = userCurrentData.bookIds.split(',') || [];\n\n  if (currentBooks.length < 2) {\n    if (reqBody.cartData.length > 0) {\n      for (let index = 0; index < reqBody.cartData.length; index++) {\n        const statement = await db.prepare('UPDATE books SET availableQty= ? where bookId= ? ');\n        const result = await statement.run(reqBody.cartData[index].availableQty - 1, reqBody.cartData[index].bookId);\n        result.finalize();\n        if (bookIds.length === 0) bookIds = reqBody.cartData[index].bookId.toString();else bookIds = bookIds.concat(`,${reqBody.cartData[index].bookId.toString()}`);\n      }\n    }\n\n    const userUpdateStatement = await db.prepare('UPDATE Users SET bookIds= ? where userId= ? ');\n    const userUpdateResult = await userUpdateStatement.run(bookIds, reqBody.userId);\n    userUpdateResult.finalize();\n    res.json({\n      data: 'Borrowed succesfully',\n      maxLimit: false\n    });\n  } else {\n    res.json({\n      data: 'Max limit of books alredy borrowed',\n      maxLimit: true\n    });\n  }\n});","map":{"version":3,"sources":["/Users/Abhipray 1/Desktop/MY home/mYY work/HEXAD_assignment/Hexad_trial_code/hexd/pages/api/borrowBooks/index.js"],"names":["openDB","UserDetails","req","res","statusCode","db","reqBody","JSON","parse","body","userCurrentData","stringify","userId","bookIds","currentBooks","split","length","cartData","index","statement","prepare","result","run","availableQty","bookId","finalize","toString","concat","userUpdateStatement","userUpdateResult","json","data","maxLimit"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,0CAAnB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjCA,EAAAA,GAAG,CAACC,UAAJ,GAAiB,GAAjB;AACA,QAAMC,EAAE,GAAG,MAAML,MAAM,EAAvB;AACA,QAAMM,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWN,GAAG,CAACO,IAAf,CAAhB;AACA,QAAMC,eAAe,GAAG,MAAMT,WAAW,CAAC;AAACQ,IAAAA,IAAI,EAAEF,IAAI,CAACI,SAAL,CAAe;AAAEC,MAAAA,MAAM,EAAEN,OAAO,CAACM;AAAlB,KAAf;AAAP,GAAD,CAAzC;AACA,MAAIC,OAAO,GAAGH,eAAe,CAACG,OAAhB,IAA2B,EAAzC;AAEA,QAAMC,YAAY,GAAGJ,eAAe,CAACG,OAAhB,CAAwBE,KAAxB,CAA8B,GAA9B,KAAsC,EAA3D;;AAEA,MAAID,YAAY,CAACE,MAAb,GAAsB,CAA1B,EAA6B;AAE3B,QAAIV,OAAO,CAACW,QAAR,CAAiBD,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,WAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGZ,OAAO,CAACW,QAAR,CAAiBD,MAA7C,EAAqDE,KAAK,EAA1D,EAA8D;AAC1D,cAAMC,SAAS,GAAG,MAAMd,EAAE,CAACe,OAAH,CAAW,mDAAX,CAAxB;AACA,cAAMC,MAAM,GAAG,MAAMF,SAAS,CAACG,GAAV,CACjBhB,OAAO,CAACW,QAAR,CAAiBC,KAAjB,EAAwBK,YAAxB,GAAqC,CADpB,EAEjBjB,OAAO,CAACW,QAAR,CAAiBC,KAAjB,EAAwBM,MAFP,CAArB;AAIAH,QAAAA,MAAM,CAACI,QAAP;AACA,YAAIZ,OAAO,CAACG,MAAR,KAAmB,CAAvB,EACIH,OAAO,GAAGP,OAAO,CAACW,QAAR,CAAiBC,KAAjB,EAAwBM,MAAxB,CAA+BE,QAA/B,EAAV,CADJ,KAGIb,OAAO,GAAGA,OAAO,CAACc,MAAR,CAAgB,IAAGrB,OAAO,CAACW,QAAR,CAAiBC,KAAjB,EAAwBM,MAAxB,CAA+BE,QAA/B,EAA0C,EAA7D,CAAV;AACP;AACF;;AAED,UAAME,mBAAmB,GAAG,MAAMvB,EAAE,CAACe,OAAH,CAAW,8CAAX,CAAlC;AACA,UAAMS,gBAAgB,GAAG,MAAMD,mBAAmB,CAACN,GAApB,CAC3BT,OAD2B,EAE3BP,OAAO,CAACM,MAFmB,CAA/B;AAIAiB,IAAAA,gBAAgB,CAACJ,QAAjB;AAEAtB,IAAAA,GAAG,CAAC2B,IAAJ,CAAS;AACPC,MAAAA,IAAI,EAAE,sBADC;AAEPC,MAAAA,QAAQ,EAAE;AAFH,KAAT;AAKD,GA7BD,MA6BO;AACL7B,IAAAA,GAAG,CAAC2B,IAAJ,CAAS;AACPC,MAAAA,IAAI,EAAE,oCADC;AAEPC,MAAAA,QAAQ,EAAE;AAFH,KAAT;AAID;AAGF,CA9CD","sourcesContent":["import openDB from '../../../backend/configs/database/openDB';\nimport UserDetails from '../getUserDetails';\n\nexport default async (req, res) => {\n  res.statusCode = 200;\n  const db = await openDB();\n  const reqBody = JSON.parse(req.body);\n  const userCurrentData = await UserDetails({body: JSON.stringify({ userId: reqBody.userId })});\n  let bookIds = userCurrentData.bookIds || ''\n\n  const currentBooks = userCurrentData.bookIds.split(',') || [];\n\n  if (currentBooks.length < 2) {\n\n    if (reqBody.cartData.length > 0) {\n      for (let index = 0; index < reqBody.cartData.length; index++) {\n          const statement = await db.prepare('UPDATE books SET availableQty= ? where bookId= ? ');\n          const result = await statement.run(\n              reqBody.cartData[index].availableQty-1,\n              reqBody.cartData[index].bookId,\n          )\n          result.finalize();\n          if (bookIds.length === 0)\n              bookIds = reqBody.cartData[index].bookId.toString()\n          else\n              bookIds = bookIds.concat(`,${reqBody.cartData[index].bookId.toString()}`)\n      }\n    }\n\n    const userUpdateStatement = await db.prepare('UPDATE Users SET bookIds= ? where userId= ? ');\n    const userUpdateResult = await userUpdateStatement.run(\n        bookIds,\n        reqBody.userId,\n    )\n    userUpdateResult.finalize();\n\n    res.json({ \n      data: 'Borrowed succesfully',\n      maxLimit: false,\n    });\n\n  } else {\n    res.json({ \n      data: 'Max limit of books alredy borrowed',\n      maxLimit: true,\n    });\n  }\n\n  \n}\n"]},"metadata":{},"sourceType":"module"}