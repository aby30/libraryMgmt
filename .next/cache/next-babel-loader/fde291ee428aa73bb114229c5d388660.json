{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Abhipray 1/Desktop/MY home/mYY work/HEXAD_assignment/Hexad_trial_code/hexd/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Abhipray 1/Desktop/MY home/mYY work/HEXAD_assignment/Hexad_trial_code/hexd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var fetchService = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var fetchUrl, _ref$method, method, reqData, fetchData;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fetchUrl = _ref.fetchUrl, _ref$method = _ref.method, method = _ref$method === void 0 ? 'GET' : _ref$method, reqData = _ref.reqData;\n            fetchData = {};\n\n            if (method !== 'GET') {\n              fetchData = {\n                method: method,\n                body: reqData,\n                headers: new Headers()\n              };\n            }\n\n            fetch(fetchUrl, method !== 'GET' && fetchData).then(function (res) {\n              return res.json();\n            }).then(function (response) {\n              return response;\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchService(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/Abhipray 1/Desktop/MY home/mYY work/HEXAD_assignment/Hexad_trial_code/hexd/client/common/utils.js"],"names":["fetchService","fetchUrl","method","reqData","fetchData","body","headers","Headers","fetch","then","res","json","response"],"mappings":";;AACA,OAAO,IAAMA,YAAY;AAAA,uEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,QAAT,QAASA,QAAT,qBAAmBC,MAAnB,EAAmBA,MAAnB,4BAA4B,KAA5B,gBAAmCC,OAAnC,QAAmCA,OAAnC;AACpBC,YAAAA,SADoB,GACR,EADQ;;AAExB,gBAAIF,MAAM,KAAK,KAAf,EAAsB;AAClBE,cAAAA,SAAS,GAAG;AACRF,gBAAAA,MAAM,EAAEA,MADA;AAERG,gBAAAA,IAAI,EAAEF,OAFE;AAGRG,gBAAAA,OAAO,EAAE,IAAIC,OAAJ;AAHD,eAAZ;AAKH;;AAEDC,YAAAA,KAAK,CAACP,QAAD,EAAWC,MAAM,KAAK,KAAX,IAAoBE,SAA/B,CAAL,CAA+CK,IAA/C,CAAoD,UAAAC,GAAG;AAAA,qBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,aAAvD,EACKF,IADL,CACU,UAAAG,QAAQ,EAAI;AACd,qBAAOA,QAAP;AACH,aAHL;;AAVwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZZ,YAAY;AAAA;AAAA;AAAA,GAAlB","sourcesContent":["\nexport const fetchService = async ({ fetchUrl, method = 'GET', reqData }) => {\n    let fetchData = {};\n    if (method !== 'GET') {\n        fetchData = {\n            method: method,\n            body: reqData,\n            headers: new Headers()\n          }\n    }\n\n    fetch(fetchUrl, method !== 'GET' && fetchData).then(res => res.json())\n        .then(response => {\n            return response\n        })\n}"]},"metadata":{},"sourceType":"module"}