{"ast":null,"code":"import sqlite from 'sqlite';\nimport UserDetails from '../getUserDetails';\nexport default (async (req, res) => {\n  res.statusCode = 200;\n  const db = await sqlite.open('./library.sqlite');\n  const reqBody = JSON.parse(req.body);\n  let bookIds = '';\n  const userCurrentData = await UserDetails({\n    body: JSON.stringify({\n      userId: reqBody.userId\n    })\n  });\n  const bookIdsBorrowed = userCurrentData.bookIds.split(',');\n  const currentBooks = bookIdsBorrowed.filter(id => parseInt(id) !== reqBody.cartData.bookId) || [];\n\n  if (currentBooks.length < 2) {\n    if (reqBody.cartData.length > 0) {\n      for (let index = 0; index < reqBody.cartData.length; index++) {\n        const statement = await db.prepare('UPDATE books SET availableQty= ? where bookId= ? ');\n        const result = await statement.run(reqBody.cartData[index].availableQty - 1, reqBody.cartData[index].bookId);\n        result.finalize();\n        if (bookIds.length === 0) bookIds = reqBody.cartData[index].bookId.toString();else bookIds = bookIds.concat(`,${reqBody.cartData[index].bookId.toString()}`);\n      }\n    }\n\n    const userUpdateStatement = await db.prepare('UPDATE Users SET bookIds= ? where userId= ? ');\n    const userUpdateResult = await userUpdateStatement.run(bookIds, reqBody.userId);\n    userUpdateResult.finalize();\n    res.json({\n      data: 'Borrowed succesfully',\n      maxLimit: false\n    });\n  } else {\n    res.json({\n      data: 'Max limit of books alredy borrowed',\n      maxLimit: true\n    });\n  }\n});","map":{"version":3,"sources":["/Users/Abhipray 1/Desktop/MY home/mYY work/HEXAD_assignment/Hexad_trial_code/hexd/pages/api/returnBook/index.js"],"names":["sqlite","UserDetails","req","res","statusCode","db","open","reqBody","JSON","parse","body","bookIds","userCurrentData","stringify","userId","bookIdsBorrowed","split","currentBooks","filter","id","parseInt","cartData","bookId","length","index","statement","prepare","result","run","availableQty","finalize","toString","concat","userUpdateStatement","userUpdateResult","json","data","maxLimit"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjCA,EAAAA,GAAG,CAACC,UAAJ,GAAiB,GAAjB;AACA,QAAMC,EAAE,GAAG,MAAML,MAAM,CAACM,IAAP,CAAY,kBAAZ,CAAjB;AACA,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWP,GAAG,CAACQ,IAAf,CAAhB;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,QAAMC,eAAe,GAAG,MAAMX,WAAW,CAAC;AAACS,IAAAA,IAAI,EAAEF,IAAI,CAACK,SAAL,CAAe;AAAEC,MAAAA,MAAM,EAAEP,OAAO,CAACO;AAAlB,KAAf;AAAP,GAAD,CAAzC;AAEA,QAAMC,eAAe,GAAGH,eAAe,CAACD,OAAhB,CAAwBK,KAAxB,CAA8B,GAA9B,CAAxB;AACA,QAAMC,YAAY,GAAGF,eAAe,CAACG,MAAhB,CAAuBC,EAAE,IAAIC,QAAQ,CAACD,EAAD,CAAR,KAAiBZ,OAAO,CAACc,QAAR,CAAiBC,MAA/D,KAA0E,EAA/F;;AAEA,MAAIL,YAAY,CAACM,MAAb,GAAsB,CAA1B,EAA6B;AAE3B,QAAIhB,OAAO,CAACc,QAAR,CAAiBE,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,WAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGjB,OAAO,CAACc,QAAR,CAAiBE,MAA7C,EAAqDC,KAAK,EAA1D,EAA8D;AAC1D,cAAMC,SAAS,GAAG,MAAMpB,EAAE,CAACqB,OAAH,CAAW,mDAAX,CAAxB;AACA,cAAMC,MAAM,GAAG,MAAMF,SAAS,CAACG,GAAV,CACjBrB,OAAO,CAACc,QAAR,CAAiBG,KAAjB,EAAwBK,YAAxB,GAAqC,CADpB,EAEjBtB,OAAO,CAACc,QAAR,CAAiBG,KAAjB,EAAwBF,MAFP,CAArB;AAIAK,QAAAA,MAAM,CAACG,QAAP;AACA,YAAInB,OAAO,CAACY,MAAR,KAAmB,CAAvB,EACIZ,OAAO,GAAGJ,OAAO,CAACc,QAAR,CAAiBG,KAAjB,EAAwBF,MAAxB,CAA+BS,QAA/B,EAAV,CADJ,KAGIpB,OAAO,GAAGA,OAAO,CAACqB,MAAR,CAAgB,IAAGzB,OAAO,CAACc,QAAR,CAAiBG,KAAjB,EAAwBF,MAAxB,CAA+BS,QAA/B,EAA0C,EAA7D,CAAV;AACP;AACF;;AAED,UAAME,mBAAmB,GAAG,MAAM5B,EAAE,CAACqB,OAAH,CAAW,8CAAX,CAAlC;AACA,UAAMQ,gBAAgB,GAAG,MAAMD,mBAAmB,CAACL,GAApB,CAC3BjB,OAD2B,EAE3BJ,OAAO,CAACO,MAFmB,CAA/B;AAIAoB,IAAAA,gBAAgB,CAACJ,QAAjB;AAEA3B,IAAAA,GAAG,CAACgC,IAAJ,CAAS;AACPC,MAAAA,IAAI,EAAE,sBADC;AAEPC,MAAAA,QAAQ,EAAE;AAFH,KAAT;AAKD,GA7BD,MA6BO;AACLlC,IAAAA,GAAG,CAACgC,IAAJ,CAAS;AACPC,MAAAA,IAAI,EAAE,oCADC;AAEPC,MAAAA,QAAQ,EAAE;AAFH,KAAT;AAID;AAGF,CA/CD","sourcesContent":["import sqlite from 'sqlite';\nimport UserDetails from '../getUserDetails'\n\nexport default async (req, res) => {\n  res.statusCode = 200;\n  const db = await sqlite.open('./library.sqlite');\n  const reqBody = JSON.parse(req.body);\n  let bookIds = ''\n  const userCurrentData = await UserDetails({body: JSON.stringify({ userId: reqBody.userId })})\n\n  const bookIdsBorrowed = userCurrentData.bookIds.split(',')\n  const currentBooks = bookIdsBorrowed.filter(id => parseInt(id) !== reqBody.cartData.bookId) || [];\n\n  if (currentBooks.length < 2) {\n\n    if (reqBody.cartData.length > 0) {\n      for (let index = 0; index < reqBody.cartData.length; index++) {\n          const statement = await db.prepare('UPDATE books SET availableQty= ? where bookId= ? ');\n          const result = await statement.run(\n              reqBody.cartData[index].availableQty-1,\n              reqBody.cartData[index].bookId,\n          )\n          result.finalize();\n          if (bookIds.length === 0)\n              bookIds = reqBody.cartData[index].bookId.toString()\n          else\n              bookIds = bookIds.concat(`,${reqBody.cartData[index].bookId.toString()}`)\n      }\n    }\n\n    const userUpdateStatement = await db.prepare('UPDATE Users SET bookIds= ? where userId= ? ');\n    const userUpdateResult = await userUpdateStatement.run(\n        bookIds,\n        reqBody.userId,\n    )\n    userUpdateResult.finalize();\n\n    res.json({ \n      data: 'Borrowed succesfully',\n      maxLimit: false,\n    });\n\n  } else {\n    res.json({ \n      data: 'Max limit of books alredy borrowed',\n      maxLimit: true,\n    });\n  }\n\n  \n}\n"]},"metadata":{},"sourceType":"module"}