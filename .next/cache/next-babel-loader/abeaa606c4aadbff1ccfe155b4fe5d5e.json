{"ast":null,"code":"import openDB from '../../../backend/configs/database/dao';\nimport BookRepo from '../../../backend/repositories/bookRepo';\nimport UserRepo from '../../../backend/repositories/userRepo';\nimport UserDetails from '../getUserDetails';\nexport default (async (req, res) => {\n  const db = await openDB();\n  const reqBody = JSON.parse(req.body);\n  let bookIds = '';\n  const userCurrentData = await UserDetails({\n    body: JSON.stringify({\n      userId: reqBody.userId\n    })\n  });\n  const bookIdsBorrowed = userCurrentData.bookIds.split(',');\n  const currentBooks = bookIdsBorrowed.filter(id => parseInt(id) !== reqBody.cartData.bookId) || [];\n\n  if (currentBooks.length < 2 && reqBody.cartData.bookId) {\n    await BookRepo.update({\n      bookId: reqBody.cartData.bookId,\n      availableQty: reqBody.cartData.availableQty + 1\n    });\n    if (bookIds.length === 0) bookIds = reqBody.cartData.bookId.toString();else bookIds = bookIds.concat(`,${reqBody.cartData.bookId.toString()}`);\n    await UserRepo.update({\n      bookId: currentBooks[0] || '',\n      userId: reqBody.userId\n    });\n    res.statusCode = 200;\n    res.json({\n      data: 'Returned succesfully'\n    });\n  } else {\n    res.json({\n      data: 'Cannot be returned'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/Abhipray 1/Desktop/MY home/mYY work/HEXAD_assignment/Hexad_trial_code/hexd/pages/api/returnBook/index.js"],"names":["openDB","BookRepo","UserRepo","UserDetails","req","res","db","reqBody","JSON","parse","body","bookIds","userCurrentData","stringify","userId","bookIdsBorrowed","split","currentBooks","filter","id","parseInt","cartData","bookId","length","update","availableQty","toString","concat","statusCode","json","data"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uCAAnB;AACA,OAAOC,QAAP,MAAqB,wCAArB;AACA,OAAOC,QAAP,MAAqB,wCAArB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAMC,EAAE,GAAG,MAAMN,MAAM,EAAvB;AACA,QAAMO,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWL,GAAG,CAACM,IAAf,CAAhB;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,QAAMC,eAAe,GAAG,MAAMT,WAAW,CAAC;AAACO,IAAAA,IAAI,EAAEF,IAAI,CAACK,SAAL,CAAe;AAAEC,MAAAA,MAAM,EAAEP,OAAO,CAACO;AAAlB,KAAf;AAAP,GAAD,CAAzC;AAEA,QAAMC,eAAe,GAAGH,eAAe,CAACD,OAAhB,CAAwBK,KAAxB,CAA8B,GAA9B,CAAxB;AACA,QAAMC,YAAY,GAAGF,eAAe,CAACG,MAAhB,CAAuBC,EAAE,IAAIC,QAAQ,CAACD,EAAD,CAAR,KAAiBZ,OAAO,CAACc,QAAR,CAAiBC,MAA/D,KAA0E,EAA/F;;AAEA,MAAIL,YAAY,CAACM,MAAb,GAAsB,CAAtB,IAA2BhB,OAAO,CAACc,QAAR,CAAiBC,MAAhD,EAAwD;AAEtD,UAAMrB,QAAQ,CAACuB,MAAT,CAAgB;AACpBF,MAAAA,MAAM,EAAEf,OAAO,CAACc,QAAR,CAAiBC,MADL;AAEpBG,MAAAA,YAAY,EAAElB,OAAO,CAACc,QAAR,CAAiBI,YAAjB,GAA8B;AAFxB,KAAhB,CAAN;AAKA,QAAId,OAAO,CAACY,MAAR,KAAmB,CAAvB,EACIZ,OAAO,GAAGJ,OAAO,CAACc,QAAR,CAAiBC,MAAjB,CAAwBI,QAAxB,EAAV,CADJ,KAGIf,OAAO,GAAGA,OAAO,CAACgB,MAAR,CAAgB,IAAGpB,OAAO,CAACc,QAAR,CAAiBC,MAAjB,CAAwBI,QAAxB,EAAmC,EAAtD,CAAV;AAEJ,UAAMxB,QAAQ,CAACsB,MAAT,CAAgB;AACpBF,MAAAA,MAAM,EAAEL,YAAY,CAAC,CAAD,CAAZ,IAAmB,EADP;AAEpBH,MAAAA,MAAM,EAAEP,OAAO,CAACO;AAFI,KAAhB,CAAN;AAKAT,IAAAA,GAAG,CAACuB,UAAJ,GAAiB,GAAjB;AACAvB,IAAAA,GAAG,CAACwB,IAAJ,CAAS;AACPC,MAAAA,IAAI,EAAE;AADC,KAAT;AAID,GAtBD,MAsBO;AACLzB,IAAAA,GAAG,CAACwB,IAAJ,CAAS;AACPC,MAAAA,IAAI,EAAE;AADC,KAAT;AAGD;AAGF,CAtCD","sourcesContent":["import openDB from '../../../backend/configs/database/dao';\nimport BookRepo from '../../../backend/repositories/bookRepo';\nimport UserRepo from '../../../backend/repositories/userRepo';\nimport UserDetails from '../getUserDetails';\n\nexport default async (req, res) => {\n  const db = await openDB();\n  const reqBody = JSON.parse(req.body);\n  let bookIds = '';\n  const userCurrentData = await UserDetails({body: JSON.stringify({ userId: reqBody.userId })});\n\n  const bookIdsBorrowed = userCurrentData.bookIds.split(',')\n  const currentBooks = bookIdsBorrowed.filter(id => parseInt(id) !== reqBody.cartData.bookId) || [];\n\n  if (currentBooks.length < 2 && reqBody.cartData.bookId) {\n\n    await BookRepo.update({\n      bookId: reqBody.cartData.bookId,\n      availableQty: reqBody.cartData.availableQty+1,\n    });\n\n    if (bookIds.length === 0)\n        bookIds = reqBody.cartData.bookId.toString()\n    else\n        bookIds = bookIds.concat(`,${reqBody.cartData.bookId.toString()}`)\n\n    await UserRepo.update({\n      bookId: currentBooks[0] || '',\n      userId: reqBody.userId,\n    });\n\n    res.statusCode = 200;\n    res.json({ \n      data: 'Returned succesfully',\n    });\n\n  } else {\n    res.json({ \n      data: 'Cannot be returned',\n    });\n  }\n\n  \n}\n"]},"metadata":{},"sourceType":"module"}