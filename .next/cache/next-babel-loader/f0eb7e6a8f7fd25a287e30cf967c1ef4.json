{"ast":null,"code":"import BookRepo from '../../../backend/repositories/bookRepo';\nimport UserRepo from '../../../backend/repositories/userRepo';\nimport UserDetails from '../getUserDetails';\nexport default (async (req, res) => {\n  const reqBody = JSON.parse(req.body);\n  const userCurrentData = await UserDetails({\n    body: JSON.stringify({\n      userId: reqBody.userId\n    })\n  });\n  let bookIds = userCurrentData.bookIds || '';\n  const currentBooks = userCurrentData.bookIds.length > 0 ? userCurrentData.bookIds.split(',') : '';\n\n  if (reqBody.cartData.length === 1 && currentBooks.length == 1 && currentBooks.includes(reqBody.cartData[0].bookId.toString())) {\n    res.statusCode = 200;\n    res.json({\n      data: 'Book already borrowed',\n      maxLimit: false,\n      existInBorrow: true\n    });\n    return;\n  }\n\n  if (currentBooks.length + reqBody.cartData.length < 3 && reqBody.cartData.length > 0) {\n    for (let index = 0; index < reqBody.cartData.length; index++) {\n      await BookRepo.update({\n        bookId: reqBody.cartData[index].bookId,\n        availableQty: reqBody.cartData[index].availableQty - 1\n      });\n      if (bookIds.length === 0) bookIds = reqBody.cartData[index].bookId.toString();else bookIds = bookIds.concat(`,${reqBody.cartData[index].bookId.toString()}`);\n    }\n\n    await UserRepo.update({\n      bookId: bookIds,\n      userId: reqBody.userId\n    });\n    res.statusCode = 200;\n    res.json({\n      data: 'Borrowed succesfully',\n      maxLimit: false\n    });\n  } else {\n    res.json({\n      data: 'Max limit of books already borrowed',\n      maxLimit: true\n    });\n  }\n});","map":{"version":3,"sources":["/Users/Abhipray 1/Desktop/MY home/mYY work/HEXAD_assignment/Hexad_trial_code/hexd/pages/api/borrowBooks/index.js"],"names":["BookRepo","UserRepo","UserDetails","req","res","reqBody","JSON","parse","body","userCurrentData","stringify","userId","bookIds","currentBooks","length","split","cartData","includes","bookId","toString","statusCode","json","data","maxLimit","existInBorrow","index","update","availableQty","concat"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,wCAArB;AACA,OAAOC,QAAP,MAAqB,wCAArB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,GAAG,CAACK,IAAf,CAAhB;AACA,QAAMC,eAAe,GAAG,MAAMP,WAAW,CAAC;AAACM,IAAAA,IAAI,EAAEF,IAAI,CAACI,SAAL,CAAe;AAAEC,MAAAA,MAAM,EAAEN,OAAO,CAACM;AAAlB,KAAf;AAAP,GAAD,CAAzC;AACA,MAAIC,OAAO,GAAGH,eAAe,CAACG,OAAhB,IAA2B,EAAzC;AAEA,QAAMC,YAAY,GAAGJ,eAAe,CAACG,OAAhB,CAAwBE,MAAxB,GAAiC,CAAjC,GAAqCL,eAAe,CAACG,OAAhB,CAAwBG,KAAxB,CAA8B,GAA9B,CAArC,GAA0E,EAA/F;;AAEA,MAAIV,OAAO,CAACW,QAAR,CAAiBF,MAAjB,KAA4B,CAA5B,IACGD,YAAY,CAACC,MAAb,IAAuB,CAD1B,IAEGD,YAAY,CAACI,QAAb,CAAsBZ,OAAO,CAACW,QAAR,CAAiB,CAAjB,EAAoBE,MAApB,CAA2BC,QAA3B,EAAtB,CAFP,EAEqE;AAC/Df,IAAAA,GAAG,CAACgB,UAAJ,GAAiB,GAAjB;AACAhB,IAAAA,GAAG,CAACiB,IAAJ,CAAS;AACPC,MAAAA,IAAI,EAAE,uBADC;AAEPC,MAAAA,QAAQ,EAAE,KAFH;AAGPC,MAAAA,aAAa,EAAE;AAHR,KAAT;AAKA;AACD;;AAEL,MAAKX,YAAY,CAACC,MAAb,GAAsBT,OAAO,CAACW,QAAR,CAAiBF,MAAxC,GAAkD,CAAlD,IAAuDT,OAAO,CAACW,QAAR,CAAiBF,MAAjB,GAA0B,CAArF,EAAwF;AAEtF,SAAK,IAAIW,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGpB,OAAO,CAACW,QAAR,CAAiBF,MAA7C,EAAqDW,KAAK,EAA1D,EAA8D;AAC1D,YAAMzB,QAAQ,CAAC0B,MAAT,CAAgB;AACpBR,QAAAA,MAAM,EAAEb,OAAO,CAACW,QAAR,CAAiBS,KAAjB,EAAwBP,MADZ;AAEpBS,QAAAA,YAAY,EAAEtB,OAAO,CAACW,QAAR,CAAiBS,KAAjB,EAAwBE,YAAxB,GAAqC;AAF/B,OAAhB,CAAN;AAIA,UAAIf,OAAO,CAACE,MAAR,KAAmB,CAAvB,EACIF,OAAO,GAAGP,OAAO,CAACW,QAAR,CAAiBS,KAAjB,EAAwBP,MAAxB,CAA+BC,QAA/B,EAAV,CADJ,KAGIP,OAAO,GAAGA,OAAO,CAACgB,MAAR,CAAgB,IAAGvB,OAAO,CAACW,QAAR,CAAiBS,KAAjB,EAAwBP,MAAxB,CAA+BC,QAA/B,EAA0C,EAA7D,CAAV;AACP;;AAED,UAAMlB,QAAQ,CAACyB,MAAT,CAAgB;AACpBR,MAAAA,MAAM,EAAEN,OADY;AAEpBD,MAAAA,MAAM,EAAEN,OAAO,CAACM;AAFI,KAAhB,CAAN;AAKAP,IAAAA,GAAG,CAACgB,UAAJ,GAAiB,GAAjB;AACAhB,IAAAA,GAAG,CAACiB,IAAJ,CAAS;AACPC,MAAAA,IAAI,EAAE,sBADC;AAEPC,MAAAA,QAAQ,EAAE;AAFH,KAAT;AAKD,GAxBD,MAwBO;AACLnB,IAAAA,GAAG,CAACiB,IAAJ,CAAS;AACPC,MAAAA,IAAI,EAAE,qCADC;AAEPC,MAAAA,QAAQ,EAAE;AAFH,KAAT;AAID;AAGF,CAnDD","sourcesContent":["import BookRepo from '../../../backend/repositories/bookRepo';\nimport UserRepo from '../../../backend/repositories/userRepo';\nimport UserDetails from '../getUserDetails';\n\nexport default async (req, res) => {\n  const reqBody = JSON.parse(req.body);\n  const userCurrentData = await UserDetails({body: JSON.stringify({ userId: reqBody.userId })});\n  let bookIds = userCurrentData.bookIds || '';\n\n  const currentBooks = userCurrentData.bookIds.length > 0 ? userCurrentData.bookIds.split(',') : '';\n\n  if (reqBody.cartData.length === 1 \n      && currentBooks.length == 1 \n      && currentBooks.includes(reqBody.cartData[0].bookId.toString())) {\n        res.statusCode = 200;\n        res.json({ \n          data: 'Book already borrowed',\n          maxLimit: false,\n          existInBorrow: true,\n        });\n        return;\n      }\n\n  if ((currentBooks.length + reqBody.cartData.length) < 3 && reqBody.cartData.length > 0) {\n\n    for (let index = 0; index < reqBody.cartData.length; index++) {\n        await BookRepo.update({\n          bookId: reqBody.cartData[index].bookId,\n          availableQty: reqBody.cartData[index].availableQty-1,\n        });\n        if (bookIds.length === 0)\n            bookIds = reqBody.cartData[index].bookId.toString();\n        else\n            bookIds = bookIds.concat(`,${reqBody.cartData[index].bookId.toString()}`);\n    }\n\n    await UserRepo.update({\n      bookId: bookIds,\n      userId: reqBody.userId,\n    });\n\n    res.statusCode = 200;\n    res.json({ \n      data: 'Borrowed succesfully',\n      maxLimit: false,\n    });\n\n  } else {\n    res.json({ \n      data: 'Max limit of books already borrowed',\n      maxLimit: true,\n    });\n  }\n\n  \n}\n"]},"metadata":{},"sourceType":"module"}