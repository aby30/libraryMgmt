{"ast":null,"code":"import sqlite from 'sqlite';\nimport UserDetails from '../getUserDetails';\nexport default (async (req, res) => {\n  res.statusCode = 200;\n  const db = await sqlite.open('./library.sqlite');\n  const reqBody = JSON.parse(req.body);\n  let bookIds = '';\n  const userCurrentData = await UserDetails({\n    body: JSON.stringify({\n      userId: reqBody.userId\n    })\n  });\n  console.log(`userCurrentData---->${JSON.stringify(userCurrentData)}`);\n\n  if (reqBody.cartData.length > 0) {\n    for (let index = 0; index < reqBody.cartData.length; index++) {\n      const statement = await db.prepare('UPDATE books SET availableQty= ? where bookId= ? ');\n      const result = await statement.run(reqBody.cartData[index].availableQty - 1, reqBody.cartData[index].bookId);\n      result.finalize();\n      if (bookIds.length === 0) bookIds = reqBody.cartData[index].bookId.toString();else bookIds = bookIds.concat(`,${reqBody.cartData[index].bookId.toString()}`);\n    }\n  }\n\n  console.log(`bookIdsbookIdsbookIds---->${bookIds}`);\n  const userUpdateStatement = await db.prepare('UPDATE Users SET bookIds= ? where userId= ? ');\n  const userUpdateResult = await userUpdateStatement.run(bookIds, reqBody.userId);\n  userUpdateResult.finalize();\n  res.json({\n    data: 'Borrowed succesfully'\n  });\n});","map":{"version":3,"sources":["/Users/Abhipray 1/Desktop/MY home/mYY work/HEXAD_assignment/Hexad_trial_code/hexd/pages/api/borrowBooks/index.js"],"names":["sqlite","UserDetails","req","res","statusCode","db","open","reqBody","JSON","parse","body","bookIds","userCurrentData","stringify","userId","console","log","cartData","length","index","statement","prepare","result","run","availableQty","bookId","finalize","toString","concat","userUpdateStatement","userUpdateResult","json","data"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjCA,EAAAA,GAAG,CAACC,UAAJ,GAAiB,GAAjB;AACA,QAAMC,EAAE,GAAG,MAAML,MAAM,CAACM,IAAP,CAAY,kBAAZ,CAAjB;AACA,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWP,GAAG,CAACQ,IAAf,CAAhB;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,QAAMC,eAAe,GAAG,MAAMX,WAAW,CAAC;AAACS,IAAAA,IAAI,EAAEF,IAAI,CAACK,SAAL,CAAe;AAAEC,MAAAA,MAAM,EAAEP,OAAO,CAACO;AAAlB,KAAf;AAAP,GAAD,CAAzC;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsBR,IAAI,CAACK,SAAL,CAAeD,eAAf,CAAgC,EAAnE;;AAEA,MAAIL,OAAO,CAACU,QAAR,CAAiBC,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGZ,OAAO,CAACU,QAAR,CAAiBC,MAA7C,EAAqDC,KAAK,EAA1D,EAA8D;AAC1D,YAAMC,SAAS,GAAG,MAAMf,EAAE,CAACgB,OAAH,CAAW,mDAAX,CAAxB;AACA,YAAMC,MAAM,GAAG,MAAMF,SAAS,CAACG,GAAV,CACjBhB,OAAO,CAACU,QAAR,CAAiBE,KAAjB,EAAwBK,YAAxB,GAAqC,CADpB,EAEjBjB,OAAO,CAACU,QAAR,CAAiBE,KAAjB,EAAwBM,MAFP,CAArB;AAIAH,MAAAA,MAAM,CAACI,QAAP;AACA,UAAIf,OAAO,CAACO,MAAR,KAAmB,CAAvB,EACIP,OAAO,GAAGJ,OAAO,CAACU,QAAR,CAAiBE,KAAjB,EAAwBM,MAAxB,CAA+BE,QAA/B,EAAV,CADJ,KAGIhB,OAAO,GAAGA,OAAO,CAACiB,MAAR,CAAgB,IAAGrB,OAAO,CAACU,QAAR,CAAiBE,KAAjB,EAAwBM,MAAxB,CAA+BE,QAA/B,EAA0C,EAA7D,CAAV;AACP;AACF;;AAEDZ,EAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4BL,OAAQ,EAAjD;AAEA,QAAMkB,mBAAmB,GAAG,MAAMxB,EAAE,CAACgB,OAAH,CAAW,8CAAX,CAAlC;AACA,QAAMS,gBAAgB,GAAG,MAAMD,mBAAmB,CAACN,GAApB,CAC3BZ,OAD2B,EAE3BJ,OAAO,CAACO,MAFmB,CAA/B;AAIAgB,EAAAA,gBAAgB,CAACJ,QAAjB;AAEAvB,EAAAA,GAAG,CAAC4B,IAAJ,CAAS;AACPC,IAAAA,IAAI,EAAE;AADC,GAAT;AAGD,CApCD","sourcesContent":["import sqlite from 'sqlite';\nimport UserDetails from '../getUserDetails'\n\nexport default async (req, res) => {\n  res.statusCode = 200;\n  const db = await sqlite.open('./library.sqlite');\n  const reqBody = JSON.parse(req.body);\n  let bookIds = ''\n  const userCurrentData = await UserDetails({body: JSON.stringify({ userId: reqBody.userId })})\n\n  console.log(`userCurrentData---->${JSON.stringify(userCurrentData)}`);\n\n  if (reqBody.cartData.length > 0) {\n    for (let index = 0; index < reqBody.cartData.length; index++) {\n        const statement = await db.prepare('UPDATE books SET availableQty= ? where bookId= ? ');\n        const result = await statement.run(\n            reqBody.cartData[index].availableQty-1,\n            reqBody.cartData[index].bookId,\n        )\n        result.finalize();\n        if (bookIds.length === 0)\n            bookIds = reqBody.cartData[index].bookId.toString()\n        else\n            bookIds = bookIds.concat(`,${reqBody.cartData[index].bookId.toString()}`)\n    }\n  }\n\n  console.log(`bookIdsbookIdsbookIds---->${bookIds}`);\n\n  const userUpdateStatement = await db.prepare('UPDATE Users SET bookIds= ? where userId= ? ');\n  const userUpdateResult = await userUpdateStatement.run(\n      bookIds,\n      reqBody.userId,\n  )\n  userUpdateResult.finalize();\n\n  res.json({ \n    data: 'Borrowed succesfully'\n  });\n}\n"]},"metadata":{},"sourceType":"module"}